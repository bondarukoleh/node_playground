npm at its core is a set of tools for installing, managing, and
creating Node modules.
Make each program do one thing well, means make your module doing something good but one thing.

npm list - graph of dependency
npm search fibonacci - search existing modules.
npm docs fibonacci - will load a homepage of module in browser

Every module has an entry point: the object/function/constructor that we get when it’s
required elsewhere using the require keyword.

A package.json is the central file for managing core data about your module, common
scripts, and dependencies. A package.json file tells npm what to
fetch and at what version to fetch our dependencies when using npm install.
The types of dependencies are as listed here:
■ dependencies—Required for your module to function properly (fails to install - error)
■ devDependencies—Required solely for development, like testing, benchmarking,
and server reloading tools
■ optionalDependencies—Not required for your module to work, but may
enhance the functionality in some way (if fails to instll - not big deal)
■ peerDependencies—Requires another module to be installed in order to run
properly

peer decencies:
I expect this module to exist in your project and to be at this version in order for
my module to work. The most common type of this dependency is a plugin.
Some popular modules that have plugins are
■ Grunt
■ Connect
■ winston
■ Mongoose

Keeping dependencies up to date
npm outdated (--depth 0)
But be aware that it will work only with dependency part, not devDependency or optional, peer.

Updating some dependency.
npm update someModule --save-dev or npm install someModule@latest --save-dev
npm update will update only MINOR and PATCH, it won't change MAJOR

Install exect version
npm i moduleName@1.0.0

Uninstall
npm uninstall moduleName (same as un, unlink, remove, rm, r)

Semantic versioning
Given a version number MAJOR.MINOR.PATCH, increment the:
MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards-compatible manner, and
PATCH version when you make backwards-compatible bug fixes.

So the main idea was next:
"module": "0.2.1" - only this version should be installed.
"module": "^0.2.1" - any Patch can be installed. (same as "0.2.x")
"module": "^1.2.1" - any Minor and Patch can be installed.(Diff - having the Major version)
"module": "~1.2.1" - any Patch can be installed. (same as 1.2.x)
"module": "1.0.0 - 1.2.0" - range of versions.

Install exactly version
npm install someModule --save-dev --save-exact

Check out of a module
npm view moduleName (same as v, info, show)
To check some info you are interested in - just add it to command
e.g. npm v moduleName dependencies - and you'll see the dependencies only.

Adding a cli executable script of your module, to users have ability to run it globally
we can emulate global installation of module using npm link from module root (under sudo)

Also we can link some module to another to test it.
i.e. from myNewModule after I can use:
const innerModule = require('maModuleName') - globally, without path.

Multiple Node versions

Using engines section in package.json - you can set on which versions of node 
you can run your app.

We can check how our module behavior thru several node versions.
A variety of popular options are available:
■ Install multiple versions of Node on your machine
■ Use Travis CI’s multi-Node version support
■ Use a third-party multi-version test module that works for your environment

PUBLISH
We can add a npm user via npm add user, from console.

Check before publish:
Semantic versioning, and release notes, tests.

npm publish

If we miss something
// make fixes
$ npm version patch
v0.1.1
npm publish

If you want to exclude some version
npm deprecate myModule@"<= 0.2.5"
"major security issue was fixed in v0.2.6"

Private module
package.json file - "private": true
This tells npm to refuse to publish your package with npm publish.

Or you can setup a share private repository in git
"dependencies": {
"myModule" : "git+ssh://git@github.com:mycompany/b.git#develop",
"a": "git+ssh://git@github.com:mycompany/a.git#0.1.0", Specifying by tag
"b": "git+ssh://git@github.com:mycompany/b.git#develop", Specifying by branch name
"c": "git+ssh://git@github.com:mycompany/c.git#dacc525c" Specifying by commit
}

Share somewhere on server zip of your library, and give a url to. Then in preinstall somewhere
npm install http://internal-server.com/myModule.tar.gz --save
